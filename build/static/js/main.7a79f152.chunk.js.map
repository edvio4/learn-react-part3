{"version":3,"sources":["logo.svg","components/Note.js","services/notes.js","components/Part2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Note","note","toggleImportance","deleteNote","label","important","onClick","content","axios","get","then","response","data","newObject","post","id","put","delete","Part2","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","notesToShow","filter","updatedNote","map","key","find","n","changedNote","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,mICc5BC,EAZF,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,iBAAkBC,EAAgB,EAAhBA,WAC7BC,EAAQH,EAAKI,UACf,oBAAsB,gBAE1B,OACI,4BACI,4BAAQC,QAASH,GAAjB,UAA6CF,EAAKM,QAClD,4BAAQD,QAASJ,GAAmBE,K,gBCiBjC,EAvBA,WAEX,OADgBI,IAAMC,IAHV,cAKPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAoBpB,EAjBA,SAAAC,GAEX,OADgBL,IAAMM,KATV,aASwBD,GAE/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAcpB,EAXA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAfJ,aAeI,YAAwBD,GAAMF,GAEzCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQpB,EALI,SAACG,GAEhB,OADgBP,IAAMS,OAAN,UArBJ,aAqBI,YAA2BF,KCqEhCG,EAtFD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAahBC,qBARa,WACTC,IAEGjB,MAAK,SAAAU,GACFC,EAASD,QAIH,IAEhB,IAAMQ,EAAcJ,EACdJ,EACAA,EAAMS,QAAO,SAAA5B,GAAI,OAAIA,EAAKI,aA8B1BF,EAAa,SAAAY,GAAE,OAAI,WACrBY,EACgBZ,GACXL,MAAK,SAAAoB,GACFT,EAASD,EAAMS,QAAO,SAAA5B,GAAI,OAAIA,EAAKc,KAAOA,WAQtD,OACI,6BACI,qCACA,6BACI,4BAAQT,QAAS,kBAAMmB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKI,EAAYG,KAAI,SAAA9B,GAAI,OACjB,kBAAC,EAAD,CAAM+B,IAAK/B,EAAKc,GAAId,KAAMA,EACtBC,kBAlCSa,EAkC8Bd,EAAKc,GAlC7B,WAC/B,IAAMd,EAAOmB,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEnB,KAAOA,KAChCoB,EAAW,eAAQlC,EAAR,CAAcI,WAAYJ,EAAKI,YAEhDsB,EACYZ,EAAIoB,GACXzB,MAAK,SAAAoB,GACFT,EAASD,EAAMW,KAAI,SAAA9B,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO6B,WA4B3C3B,WAAYA,EAAWF,EAAKc,MAnCnB,IAAAA,MAuCrB,0BAAMqB,SAxDE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfhC,QAASe,EACTkB,MAAM,IAAIC,MAAOC,cACjBrC,UAAWsC,KAAKC,SAAW,GAC3B7B,GAAIK,EAAMyB,OAAS,GAGvBlB,EACYY,GACP7B,MAAK,SAAAY,GACFD,EAASD,EAAM0B,OAAOxB,IACtBC,EAAW,SA4CX,2BACIwB,MAAOzB,EACP0B,SAvBS,SAACX,GACtBd,EAAWc,EAAMY,OAAOF,UAwBhB,4BAAQG,KAAK,UAAb,WCzDDC,MAjBf,YACI,OADkB,EAAR/B,MAEN,oCAUI,kBAAC,EAAD,QCXQgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a79f152.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Note = ({note, toggleImportance, deleteNote}) => {\n    const label = note.important ?\n        'make not imporant' : 'make imporant';\n\n    return (\n        <li>\n            <button onClick={deleteNote}>delete</button>{note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n}\n\nexport default Note;\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request\n        .then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request\n        .then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request\n        .then(response => response.data);\n}\n\nconst deleteNote = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`);\n    return request;\n}\n\nexport default { getAll, create, update, deleteNote };\n","import React, { useState, useEffect } from 'react';\nimport Note from './Note';\nimport noteService from '../services/notes';\n\n\nconst Part2 = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('a new note...');\n    const [showAll, setShowAll] = useState(true);\n\n    const hook = () => {\n        noteService\n          .getAll()\n          .then(notes => {\n              setNotes(notes);\n        });\n    }\n\n    useEffect(hook, []);\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important);\n\n    const addNote = (event) => {\n        event.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1\n        };\n\n        noteService\n            .create(noteObject)\n            .then(newNote => {\n                setNotes(notes.concat(newNote));\n                setNewNote('');\n            });\n    }\n\n    const toggleNoteImportance = id => () => {\n        const note = notes.find(n => n.id === id);\n        const changedNote = { ...note, important: !note.important };\n\n        noteService\n            .update(id, changedNote)\n            .then(updatedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : updatedNote));\n            });\n    }\n\n    const deleteNote = id => () => {\n        noteService\n            .deleteNote(id)\n            .then(updatedNote => {\n                setNotes(notes.filter(note => note.id !== id));\n            });\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value);\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note =>\n                    <Note key={note.id} note={note}\n                        toggleImportance={toggleNoteImportance(note.id)}\n                        deleteNote={deleteNote(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Part2;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Part1ab from './components/Part1ab';\nimport Part1c from './components/Part1c';\nimport Part1d from './components/Part1d';\nimport Part1dexer from './components/Part1dexer';\nimport Part2 from './components/Part2';\nimport Part2bExer from './components/Part2bExer/Part2bExer';\nimport Part2cExer from './components/Part2cExer/Part2cExer';\n\nfunction App({notes}) {\n    return (\n        <>\n        {\n            // <Part1ab />\n            // <Part1c />\n            // <Part1d />\n            //<Part1dexer />\n            // <Part2 />\n            // <Part2bExer />\n            // <Part2cExer />\n        }\n            <Part2 />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}